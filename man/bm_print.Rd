% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bm_print.R
\name{bm_print}
\alias{bm_print}
\title{Print bitmap objects}
\usage{
bm_print(x, ...)
}
\arguments{
\item{x}{A bitmap object that can be cast by \code{\link[=as_bm_pixmap]{as_bm_pixmap()}} to a \code{\link[=bm_pixmap]{bm_pixmap()}} object.}

\item{...}{Passed to \code{\link[=print.bm_pixmap]{print.bm_pixmap()}} or \code{\link[=print.bm_bitmap]{print.bm_bitmap()}} depending on the class of \code{x}.}
}
\value{
A character vector of the string representation returned invisibly.
As a side effect prints out the string representation to the terminal.
}
\description{
\code{bm_print()} prints the bitmap object.
It is a wrapper around \code{\link[=as_bm_bitmap]{as_bm_bitmap()}} / \code{\link[=as_bm_pixmap]{as_bm_pixmap()}} and
\code{\link[=print.bm_bitmap]{print.bm_bitmap()}} / \code{\link[=print.bm_pixmap]{print.bm_pixmap()}}.
}
\examples{
font_file <- system.file("fonts/spleen/spleen-8x16.hex.gz", package = "bittermelon")
font <- read_hex(font_file)
capital_r <- as_bm_bitmap("R", font = font)
bm_print(capital_r)

corn_r <- as.raster(farming_crops_16x16()$corn$portrait)
if (cli::is_utf8_output() && cli::num_ansi_colors() >= 256L) {
  bm_print(corn_r, compress = "v") 
}

if (requireNamespace("magick", quietly = TRUE) &&
    cli::is_utf8_output() && 
    cli::num_ansi_colors() > 256L) {
  rose_mi <- magick::image_read("rose:")
  bm_print(rose_mi, compress = "v") 
}

\dontrun{# Change other bitmap classes' `print()` to use `bm_print()` instead
  options(bittermelon.compress = "vertical",
          bittermelon.downscale = requireNamespace("magick", quietly = TRUE))
  for (cl in c("glyph_bitmap", "magick-image", "nativeRaster", "pixeltrix",
               "pixmapGrey", "pixmapIndexed", "pixmapRGB", "raster")) {
    .S3method("print", cl, bittermelon::bm_print)
  }
}
}
\seealso{
\code{\link[=.S3method]{.S3method()}} to register this as the print method for a target bitmap class.
}
